    def test1(self):
        input = """Class Dog { }"""
        expect = """Program([ClassDecl(Id(Dog),[])])"""
        self.assertTrue(TestAST.test(input,expect,301))
    def test2(self):
        input = """Class Dog : Animal { }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[])])"""
        self.assertTrue(TestAST.test(input,expect,302))
    def test3(self):
        input = """Class Dog : Animal { main(){} }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id(main),Instance,[],Block([]))])])"""
        self.assertTrue(TestAST.test(input,expect,303))
    def test4(self):
        input = """Class Dog : Animal { $test(){} main(){} }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([])),MethodDecl(Id(main),Instance,[],Block([]))])])"""
        self.assertTrue(TestAST.test(input,expect,304))
    def test5(self):
        input = """Class Dog : Animal { $test(a, b, c:Int){} }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),IntType)],Block([]))])])"""
        self.assertTrue(TestAST.test(input,expect,305))
    def test6(self):
        input = """Class Dog : Animal { $test(a, b, c:Int){ Break; Continue; } }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),IntType)],Block([Break,Continue]))])])"""
        self.assertTrue(TestAST.test(input,expect,306))
    def test7(self):
        input = """
        Class Dog : Animal 
        { 
            $test(a, b, c:Int)
            { 
                Var a: Int; 
                Break; 
                Continue; 
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),IntType)],Block([VarDecl(Id(a),IntType),Break,Continue]))])])"""
        self.assertTrue(TestAST.test(input,expect,307))
    def test8(self):
        input = """
        Class Dog : Animal 
        { 
            $test(a, b, c:Int)
            { 
                Var a: Int; 
                Var b: Float;
                Var c: String;
                Break; 
                Continue; 
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),IntType)],Block([VarDecl(Id(a),IntType),VarDecl(Id(b),FloatType),VarDecl(Id(c),StringType),Break,Continue]))])])"""
        self.assertTrue(TestAST.test(input,expect,308))
    def test9(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var ast, bdafs, cdadsas: Int; 
                Break; 
                Continue; 
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(ast),IntType),VarDecl(Id(bdafs),IntType),VarDecl(Id(cdadsas),IntType),Break,Continue]))])])"""
        self.assertTrue(TestAST.test(input,expect,309))
    def test10(self):
        input = """
        Class Dog : Animal 
        { 
            Val $a : String;
            Var b, $c: Int;
            $test()
            { 
                Var ast, bdafs, cdadsas: Int; 
                Val bv : Float;
                Break; 
                Continue; 
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[AttributeDecl(Static,ConstDecl(Id($a),StringType,None)),AttributeDecl(Instance,VarDecl(Id(b),IntType)),AttributeDecl(Static,VarDecl(Id($c),IntType)),MethodDecl(Id($test),Static,[],Block([VarDecl(Id(ast),IntType),VarDecl(Id(bdafs),IntType),VarDecl(Id(cdadsas),IntType),ConstDecl(Id(bv),FloatType,None),Break,Continue]))])])"""
        self.assertTrue(TestAST.test(input,expect,310))
    def test11(self):
        input = """
        Class Dog : Animal 
        { 
            Val $a : String;
            Var b, $c: Int;
            $test()
            { 
                Var ast, bdafs, cdadsas: Int; 
                Val bv : Float;
                Break; 
                Continue; 
            } 
            main(a, b, c : Int)
            {
                Var a : Boolean;
            }
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[AttributeDecl(Static,ConstDecl(Id($a),StringType,None)),AttributeDecl(Instance,VarDecl(Id(b),IntType)),AttributeDecl(Static,VarDecl(Id($c),IntType)),MethodDecl(Id($test),Static,[],Block([VarDecl(Id(ast),IntType),VarDecl(Id(bdafs),IntType),VarDecl(Id(cdadsas),IntType),ConstDecl(Id(bv),FloatType,None),Break,Continue])),MethodDecl(Id(main),Instance,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),IntType)],Block([VarDecl(Id(a),BoolType)]))])])"""
        self.assertTrue(TestAST.test(input,expect,311))
    def test12(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var ast, d, c : Int = 1, 5, 7; 
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(ast),IntType,IntLit(1)),VarDecl(Id(d),IntType,IntLit(5)),VarDecl(Id(c),IntType,IntLit(7))]))])])"""
        self.assertTrue(TestAST.test(input,expect,312))
    def test13(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var ast, d, c : Int = 1, 5, 7; 
                Var a : Boolean = True; 
                Var a : String = "abc";
            } 
            Var c, $d, e, $f : Int = 1, 2, 2, 3;
            Var a, b : Int = 5 - 6 * 7, 6 / 7 + 2;
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(ast),IntType,IntLit(1)),VarDecl(Id(d),IntType,IntLit(5)),VarDecl(Id(c),IntType,IntLit(7)),VarDecl(Id(a),BoolType,BooleanLit(True)),VarDecl(Id(a),StringType,StringLit(abc))])),AttributeDecl(Instance,VarDecl(Id(c),IntType,IntLit(1))),AttributeDecl(Static,VarDecl(Id($d),IntType,IntLit(2))),AttributeDecl(Instance,VarDecl(Id(e),IntType,IntLit(2))),AttributeDecl(Static,VarDecl(Id($f),IntType,IntLit(3))),AttributeDecl(Instance,VarDecl(Id(a),IntType,BinaryOp(-,IntLit(5),BinaryOp(*,IntLit(6),IntLit(7))))),AttributeDecl(Instance,VarDecl(Id(b),IntType,BinaryOp(+,BinaryOp(/,IntLit(6),IntLit(7)),IntLit(2))))])])"""
        self.assertTrue(TestAST.test(input,expect,313))
    def test14(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                a = 5;
                b = 7;
                c = 5-8/3*8;
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([AssignStmt(Id(a),IntLit(5)),AssignStmt(Id(b),IntLit(7)),AssignStmt(Id(c),BinaryOp(-,IntLit(5),BinaryOp(*,BinaryOp(/,IntLit(8),IntLit(3)),IntLit(8))))]))])])"""
        self.assertTrue(TestAST.test(input,expect,314))
    def test15(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var a, b, c : Int = 0, 0, 0;
                If (a == b)
                {
                    b = c;
                    Var div, mod, mul : Float = 0.25, 1.2e5, 0.3;
                    c = div / mod * mul;
                }
                Else
                {
                    b = 0;
                    c = 0;
                }
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(0)),VarDecl(Id(c),IntType,IntLit(0)),If(BinaryOp(==,Id(a),Id(b)),Block([AssignStmt(Id(b),Id(c)),VarDecl(Id(div),FloatType,FloatLit(0.25)),VarDecl(Id(mod),FloatType,FloatLit(120000.0)),VarDecl(Id(mul),FloatType,FloatLit(0.3)),AssignStmt(Id(c),BinaryOp(*,BinaryOp(/,Id(div),Id(mod)),Id(mul)))]),Block([AssignStmt(Id(b),IntLit(0)),AssignStmt(Id(c),IntLit(0))]))]))])])"""
        self.assertTrue(TestAST.test(input,expect,315))
    def test16(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var a, b, c : Int = 0, 0, 0;
                If (a == b)
                {
                    b = c;
                    Var div, mod, mul : Float = 0.25, 1.2e5, 0.3;
                    c = div / mod * mul;
                }
                Elseif (a != b)
                {
                    b = 0;
                    c = 0;
                }
                Else
                {
                    b = -1;
                    a = -2;
                }
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(0)),VarDecl(Id(c),IntType,IntLit(0)),If(BinaryOp(==,Id(a),Id(b)),Block([AssignStmt(Id(b),Id(c)),VarDecl(Id(div),FloatType,FloatLit(0.25)),VarDecl(Id(mod),FloatType,FloatLit(120000.0)),VarDecl(Id(mul),FloatType,FloatLit(0.3)),AssignStmt(Id(c),BinaryOp(*,BinaryOp(/,Id(div),Id(mod)),Id(mul)))]),If(BinaryOp(!=,Id(a),Id(b)),Block([AssignStmt(Id(b),IntLit(0)),AssignStmt(Id(c),IntLit(0))]),Block([AssignStmt(Id(b),UnaryOp(-,IntLit(1))),AssignStmt(Id(a),UnaryOp(-,IntLit(2)))])))]))])])"""
        self.assertTrue(TestAST.test(input,expect,316))
    def test17(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var a, b, c : Int = 0, 0, 0;
                If (a == b)
                {
                    b = c;
                    Var div, mod, mul : Float = 0.25, 1.2e5, 0.3;
                    c = div / mod * mul;
                }
                Elseif (a != b)
                {
                    b = 0;
                    c = 0;
                }
                Elseif (H == L)
                {
                    b = -1;
                    a = -2;
                }
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(0)),VarDecl(Id(c),IntType,IntLit(0)),If(BinaryOp(==,Id(a),Id(b)),Block([AssignStmt(Id(b),Id(c)),VarDecl(Id(div),FloatType,FloatLit(0.25)),VarDecl(Id(mod),FloatType,FloatLit(120000.0)),VarDecl(Id(mul),FloatType,FloatLit(0.3)),AssignStmt(Id(c),BinaryOp(*,BinaryOp(/,Id(div),Id(mod)),Id(mul)))]),If(BinaryOp(!=,Id(a),Id(b)),Block([AssignStmt(Id(b),IntLit(0)),AssignStmt(Id(c),IntLit(0))]),If(BinaryOp(==,Id(H),Id(L)),Block([AssignStmt(Id(b),UnaryOp(-,IntLit(1))),AssignStmt(Id(a),UnaryOp(-,IntLit(2)))]))))]))])])"""
        self.assertTrue(TestAST.test(input,expect,317))
    def test18(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var a, b, c : Int = 0, 0, 0;
                If (a == b)
                {
                    b = c;
                    Var div, mod, mul : Float = 0.25, 1.2e5, 0.3;
                    c = div / mod * mul;
                }
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(0)),VarDecl(Id(c),IntType,IntLit(0)),If(BinaryOp(==,Id(a),Id(b)),Block([AssignStmt(Id(b),Id(c)),VarDecl(Id(div),FloatType,FloatLit(0.25)),VarDecl(Id(mod),FloatType,FloatLit(120000.0)),VarDecl(Id(mul),FloatType,FloatLit(0.3)),AssignStmt(Id(c),BinaryOp(*,BinaryOp(/,Id(div),Id(mod)),Id(mul)))]))]))])])"""
        self.assertTrue(TestAST.test(input,expect,318))
    def test19(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Var a, b, c : Int = 0, 0, 0;
                Var a : Array[Int, 5];
                Var b : Array[Float, 2] = Array(1.2, 5.2);
                Val ab: Array[Float, 5] = Array(1.2, 3.6, 34e5, 23e4, 12.7e-4);
                Var arr: Array[Array[Array[Float, 01], 0x3_23],4];
                Var aduvip : Array[Array[Int, 5], 3] = Array(Array(11,12,13,14,15),Array(6,7,8,9,10),Array(1,2,3,4,5));
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(0)),VarDecl(Id(c),IntType,IntLit(0)),VarDecl(Id(a),ArrayType(IntLit(5),IntType)),VarDecl(Id(b),ArrayType(IntLit(2),FloatType),[FloatLit(1.2),FloatLit(5.2)]),ConstDecl(Id(ab),ArrayType(IntLit(5),FloatType),[FloatLit(1.2),FloatLit(3.6),FloatLit(3400000.0),FloatLit(230000.0),FloatLit(0.00127)]),VarDecl(Id(arr),ArrayType(IntLit(4),ArrayType(IntLit(803),ArrayType(IntLit(1),FloatType)))),VarDecl(Id(aduvip),ArrayType(IntLit(3),ArrayType(IntLit(5),IntType)),[[IntLit(11),IntLit(12),IntLit(13),IntLit(14),IntLit(15)],[IntLit(6),IntLit(7),IntLit(8),IntLit(9),IntLit(10)],[IntLit(1),IntLit(2),IntLit(3),IntLit(4),IntLit(5)]])]))])])"""
        self.assertTrue(TestAST.test(input,expect,319))
    def test20(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                a[1] = 2;
                a[1][2][3][4] = 1 + 2 - 3 * 4 / 5;
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([AssignStmt(ArrayCell(Id(a),[IntLit(1)]),IntLit(2)),AssignStmt(ArrayCell(Id(a),[IntLit(1),IntLit(2),IntLit(3),IntLit(4)]),BinaryOp(-,BinaryOp(+,IntLit(1),IntLit(2)),BinaryOp(/,BinaryOp(*,IntLit(3),IntLit(4)),IntLit(5))))]))])])"""
        self.assertTrue(TestAST.test(input,expect,320))
    def test21(self):
        input = """
        Class Dog : Animal 
        { 
            $test()
            { 
                Player::$name = "Hieu";
                a::$c = "Henry" +. "Le";
            } 
        }"""
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($test),Static,[],Block([AssignStmt(FieldAccess(Id(Player),Id($name)),StringLit(Hieu)),AssignStmt(FieldAccess(Id(a),Id($c)),BinaryOp(+.,StringLit(Henry),StringLit(Le)))]))])])"""
        self.assertTrue(TestAST.test(input,expect,321))
    def test22(self):
        input = """
            Class Dog: Animal {
                $gaugau() {
                    a = b[7][2];
                    c[2][3] = d;
                }
            }
            """
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[MethodDecl(Id($gaugau),Static,[],Block([AssignStmt(Id(a),ArrayCell(Id(b),[IntLit(7),IntLit(2)])),AssignStmt(ArrayCell(Id(c),[IntLit(2),IntLit(3)]),Id(d))]))])])"""
        self.assertTrue(TestAST.test(input,expect,322))
    def test23(self):
        input = """
            Class Dog: Animal { }
            Class Snake: De { }
            Class butterfly {
                __str__() {
                    Var a, b, c, d, e: Int = 0,0,0,0,0;
                    Val a,b,c,d,e: Int;
                }
            }
            """
        expect = """Program([ClassDecl(Id(Dog),Id(Animal),[]),ClassDecl(Id(Snake),Id(De),[]),ClassDecl(Id(butterfly),[MethodDecl(Id(__str__),Instance,[],Block([VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(0)),VarDecl(Id(c),IntType,IntLit(0)),VarDecl(Id(d),IntType,IntLit(0)),VarDecl(Id(e),IntType,IntLit(0)),ConstDecl(Id(a),IntType,None),ConstDecl(Id(b),IntType,None),ConstDecl(Id(c),IntType,None),ConstDecl(Id(d),IntType,None),ConstDecl(Id(e),IntType,None)]))])])"""
        self.assertTrue(TestAST.test(input,expect,323))
    def test24(self):
        input = """ 
            Class MeowMeow: Dog {
                Var b: Int;
                Var $a, c, d: Float = .e4, 2., 78.9;
                Var a: Array[Float, 5] = Array(1.2, 3.6, 34e5, 23e4, 12.7e4);
            }
            """
        expect = """Program([ClassDecl(Id(MeowMeow),Id(Dog),[AttributeDecl(Instance,VarDecl(Id(b),IntType)),AttributeDecl(Static,VarDecl(Id($a),FloatType,FloatLit(0.0))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,FloatLit(2.0))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,FloatLit(78.9))),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(IntLit(5),FloatType),[FloatLit(1.2),FloatLit(3.6),FloatLit(3400000.0),FloatLit(230000.0),FloatLit(127000.0)]))])])"""
        self.assertTrue(TestAST.test(input,expect,324))
    def test25(self):
        input = """
        Class A {

        }
        Class B {
            foo() { 
                If (a) {
                    a = 4;
                }
                Elseif (b) {
                    a = 3;
                    b = 5;
                    c = 8;
                }
                Elseif (12 == 8) {
                    r = 1;
                    pi = 0.3;
                }
                Elseif (9) {
                    r = 6;
                }
                Else {
                    t = myElse;
                }
            }
        }"""
        expect = """Program([ClassDecl(Id(A),[]),ClassDecl(Id(B),[MethodDecl(Id(foo),Instance,[],Block([If(Id(a),Block([AssignStmt(Id(a),IntLit(4))]),If(Id(b),Block([AssignStmt(Id(a),IntLit(3)),AssignStmt(Id(b),IntLit(5)),AssignStmt(Id(c),IntLit(8))]),If(BinaryOp(==,IntLit(12),IntLit(8)),Block([AssignStmt(Id(r),IntLit(1)),AssignStmt(Id(pi),FloatLit(0.3))]),If(IntLit(9),Block([AssignStmt(Id(r),IntLit(6))]),Block([AssignStmt(Id(t),Id(myElse))])))))]))])])"""
        self.assertTrue(TestAST.test(input,expect,325))
    def test26(self):
        input = """
        Class Dog { Val d,b: Int = 9, 5;}"""
        expect = """Program([ClassDecl(Id(Dog),[AttributeDecl(Instance,ConstDecl(Id(d),IntType,IntLit(9))),AttributeDecl(Instance,ConstDecl(Id(b),IntType,IntLit(5)))])])"""
        self.assertTrue(TestAST.test(input,expect,326))
    def test27(self):
        input = """
        Class Dog 
        { 
            Val d,b: Int = 9, 5;
            main()
            {
                Player::$setName("Henry");
                Var player: String = Player::$getName();
                Player::$age = 22;
                Player::$Move(0,1,0);
            }
        }"""
        expect = """Program([ClassDecl(Id(Dog),[AttributeDecl(Instance,ConstDecl(Id(d),IntType,IntLit(9))),AttributeDecl(Instance,ConstDecl(Id(b),IntType,IntLit(5))),MethodDecl(Id(main),Instance,[],Block([Call(Id(Player),Id($setName),[StringLit(Henry)]),VarDecl(Id(player),StringType,CallExpr(Id(Player),Id($getName),[])),AssignStmt(FieldAccess(Id(Player),Id($age)),IntLit(22)),Call(Id(Player),Id($Move),[IntLit(0),IntLit(1),IntLit(0)])]))])])"""
        self.assertTrue(TestAST.test(input,expect,327))
    def test28(self):
        input = """
        Class Dog 
        { 
            Val d,b: Int = 9, 5;
            Var c,d: Float = .2e5, 0.5;
            main()
            {
            }
            Val d,b: Int = 9, 5;
            Var c,d: Float = .2e5, 0.5;
            main()
            {
            }
            Val d,b: Int = 9, 5;
            Var c,d: Float = .2e5, 0.5;
            main()
            {
            }
            Val d,b: Int = 9, 5;
            Var c,d: Float = .2e5, 0.5;
            main()
            {
            }
            main()
            {
            }
            main()
            {
            }
            main()
            {
            }
        }"""
        expect = """Program([ClassDecl(Id(Dog),[AttributeDecl(Instance,ConstDecl(Id(d),IntType,IntLit(9))),AttributeDecl(Instance,ConstDecl(Id(b),IntType,IntLit(5))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,FloatLit(20000.0))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,FloatLit(0.5))),MethodDecl(Id(main),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(d),IntType,IntLit(9))),AttributeDecl(Instance,ConstDecl(Id(b),IntType,IntLit(5))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,FloatLit(20000.0))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,FloatLit(0.5))),MethodDecl(Id(main),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(d),IntType,IntLit(9))),AttributeDecl(Instance,ConstDecl(Id(b),IntType,IntLit(5))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,FloatLit(20000.0))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,FloatLit(0.5))),MethodDecl(Id(main),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(d),IntType,IntLit(9))),AttributeDecl(Instance,ConstDecl(Id(b),IntType,IntLit(5))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,FloatLit(20000.0))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,FloatLit(0.5))),MethodDecl(Id(main),Instance,[],Block([])),MethodDecl(Id(main),Instance,[],Block([])),MethodDecl(Id(main),Instance,[],Block([])),MethodDecl(Id(main),Instance,[],Block([]))])])"""
        self.assertTrue(TestAST.test(input,expect,328))
    def test29(self):
        input = """
        Class Dog 
        { 
            Var a : Int;
            Val b : Int;
        }"""
        expect = """Program([ClassDecl(Id(Dog),[AttributeDecl(Instance,VarDecl(Id(a),IntType)),AttributeDecl(Instance,ConstDecl(Id(b),IntType,None))])])"""
        self.assertTrue(TestAST.test(input,expect,329))
    def test30(self):
        input = """
            Class Dog { 
            Var r: Float = 0xA001;
            Val $a, $b: Boolean = True, True;
            }"""
        expect = """Program([ClassDecl(Id(Dog),[AttributeDecl(Instance,VarDecl(Id(r),FloatType,IntLit(40961))),AttributeDecl(Static,ConstDecl(Id($a),BoolType,BooleanLit(True))),AttributeDecl(Static,ConstDecl(Id($b),BoolType,BooleanLit(True)))])])"""
        self.assertTrue(TestAST.test(input,expect,330))