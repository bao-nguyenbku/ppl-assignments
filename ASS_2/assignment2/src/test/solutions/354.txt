Program([ClassDecl(Id(favor),[MethodDecl(Id(f),Instance,[],Block([If(BinaryOp(<,Id(noOfDigit),IntLit(2)),Block([Call(Id(std),Id(out),[StringLit(\nIt is a Single-digit Number!)]),Call(Id(std),Id(out),[StringLit(\nTry again with a Number with Two or More Digits!)])]),If(BinaryOp(==,Id(noOfDigit),IntLit(2)),Block([AssignStmt(Id(temp),Id(num)),Call(Id(std),Id(out),[StringLit(\nFirst and Last Digit Interchanged Successfully!)]),Call(Id(std),Id(out),[StringLit(\n\nNew Number = )])]),Block([AssignStmt(Id(temp),Id(num)),AssignStmt(Id(revNum),Id(rev)),AssignStmt(Id(rev),IntLit(0)),AssignStmt(Id(temp),Id(num)),AssignStmt(Id(noOfDigitTemp),Id(noOfDigit)),For(Id(temp),IntLit(0),Id(Infinity),IntLit(10),Block([AssignStmt(Id(remTemp),BinaryOp(%,Id(revNum),IntLit(10))),If(BinaryOp(==,Id(noOfDigitTemp),Id(noOfDigit)),Block([AssignStmt(Id(rem),BinaryOp(%,Id(temp),IntLit(10))),AssignStmt(Id(rev),BinaryOp(+,BinaryOp(*,Id(rev),IntLit(10)),Id(rem)))]),If(BinaryOp(==,Id(noOfDigitTemp),IntLit(1)),Block([AssignStmt(Id(rem),BinaryOp(%,Id(temp),IntLit(10))),AssignStmt(Id(rev),BinaryOp(+,BinaryOp(*,Id(rev),IntLit(10)),Id(rem)))]),Block([AssignStmt(Id(rev),BinaryOp(+,BinaryOp(*,Id(rev),IntLit(10)),Id(remTemp)))]))),AssignStmt(Id(temp),BinaryOp(/,Id(temp),IntLit(10))),AssignStmt(Id(revNum),BinaryOp(/,Id(revNum),IntLit(10))),AssignStmt(Id(noOfDigitTemp),BinaryOp(-,Id(noOfDigitTemp),IntLit(1)))])])])))]))])])