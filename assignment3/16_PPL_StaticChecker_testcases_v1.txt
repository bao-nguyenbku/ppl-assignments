def test0(self):
    input = """
    Class Dog : Animal {
        Val $a : Int = 3.2;
        $getDog() { }
    }
    Class Meow {
        $set() { }
    }
    """
    expect = "Type Mismatch In Statement: ConstDecl(Id($a),IntType,FloatLit(3.2))"
    self.assertTrue(TestChecker.test(input,expect,400))
def test1(self):
    input = """
    Class A {
        Var $a: Int;
    }
    Class A {
        Val $b: Float;
    }
    """
    expect = "Redeclared Class: A"
    self.assertTrue(TestChecker.test(input,expect,401))

def test2(self):
    input = """
    Class A {
        Val $a: Int = 2 + True;
    }
    """
    expect = "Type Mismatch In Expression: BinaryOp(+,IntLit(2),BooleanLit(True))"
    self.assertTrue(TestChecker.test(input,expect,402))
def test3(self):
    input = """
    Class A {
        Val $a: Int = 3;
    }
    Class B {
        Val $b: A = New A();
    }
    """
    expect = "Undeclared Method: Constructor"
    self.assertTrue(TestChecker.test(input,expect,403))

def test4(self):
    input = """
    Class B: A {
        Val $r :Int = 2 + 2 * 2.5;
        Var a: Boolean = True;
        setA(a: Int) { }
    }
    """
    expect = "Type Mismatch In Statement: ConstDecl(Id($r),IntType,BinaryOp(+,IntLit(2),BinaryOp(*,IntLit(2),FloatLit(2.5))))"
    self.assertTrue(TestChecker.test(input,expect,404))
def test5(self):
    input = """
    Class B: A {
        Var t: Float = 1.4 % 3; 
        setA(a: Int) { }
    }
    """
    expect = "Type Mismatch In Expression: BinaryOp(%,FloatLit(1.4),IntLit(3))"
    self.assertTrue(TestChecker.test(input,expect,405))
def test6(self):
    input = """
    Class A {
        Var a: Array[Array[Int, 2], 2] = Array(
                                            Array(3,6),
                                            Array(8,9.2)
        );
    }
    """
    expect = "Illegal Array Literal: [IntLit(8),FloatLit(9.2)]"
    self.assertTrue(TestChecker.test(input,expect,406))
def test7(self):
    input = """
    Class A {
        Var a: Int = 120;
        Val $a: C = New C();
    }
    """
    expect = "Undeclared Class: C"
    self.assertTrue(TestChecker.test(input,expect,407))
def test8(self):
    input = """
    Class A {
        Var a, t, r: Int = 120, 12 * 60 - 9, 1e4;
    }
    """
    expect = "Type Mismatch In Statement: VarDecl(Id(r),IntType,FloatLit(10000.0))"
    self.assertTrue(TestChecker.test(input,expect,408))
def test9(self):
    input = """
    Class B {
        Val C: String;
    }
    """
    expect = "Illegal Constant Expression: None"
    self.assertTrue(TestChecker.test(input,expect,409))
def test10(self):
    input = """
    Class A {
        Val $a: Int = 3;
        Constructor(a: Float; b: Int) { }
    }
    Class B {
        Val $b: A = New A(1, 3.2);
    }
    """
    expect = "Type Mismatch In Expression: NewExpr(Id(A),[IntLit(1),FloatLit(3.2)])"
    self.assertTrue(TestChecker.test(input,expect,410))
def test11(self):
    input = """
    Class A {
        Var z: Int;
        getA(a: Int) {
            Var b: Int;
            Foreach (b In 1 .. 10) { 
                If (b > 4) { Var c: Float = 2; }
            }
        }
    }
    """
        # Var b: Int = A.c.a;
    expect = "Type Mismatch In Statement: VarDecl(Id(c),FloatType,IntLit(2))"
    self.assertTrue(TestChecker.test(input,expect,411))
def test12(self):
    input = """
    Class A {
        Var z: Int;
        getA(a: Int) {
            Foreach (b In 1 .. 10) { }
        }
    }
    """
        # Var b: Int = A.c.a;
    expect = "Undeclared Variable: b"
    self.assertTrue(TestChecker.test(input,expect,412))
def test13(self):
    input = """
    Class A {
        Var z: Int;
        getA(a: Int) {
            Var b: Int;
            Foreach (b In 1.2 .. 10.5) { }
        }
    }
    """
        # Var b: Int = A.c.a;
    expect = "Type Mismatch In Statement: For(Id(b),FloatLit(1.2),FloatLit(10.5),IntLit(1),Block([])])"
    self.assertTrue(TestChecker.test(input,expect,413))
def test14(self):
    input = """
    Class A {
        Var z: Int;
        getA(a: Int) {
            Var b: Int;
            Foreach (b In 1 .. 100) {
                If (b + 4) { }
                Else { Var e: String; }
            }
        }
    }
    """
        # Var b: Int = A.c.a;
    expect = "Type Mismatch In Statement: If(BinaryOp(+,Id(b),IntLit(4)),Block([]),Block([VarDecl(Id(e),StringType)]))"
    self.assertTrue(TestChecker.test(input,expect,414))
def test15(self):
    input = """
    Class A {
        Var z: Int;
        getA(a: Int) {
            Var b: Int;
            Foreach (b In 1 .. 100) {
                If (b > 6) { 
                    If (b < 120) { }
                    Elseif (a > 10) { }
                    Elseif (a * 10) { }
                }
                Else { Var e: String; }
            }
        }
    }
    """
        # Var b: Int = A.c.a;
    expect = "Type Mismatch In Statement: If(BinaryOp(*,Id(a),IntLit(10)),Block([]))"
    self.assertTrue(TestChecker.test(input,expect,415))